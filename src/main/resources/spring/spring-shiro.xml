<?xml version="1.1" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">

	<description>Shiro安全配置</description>
	
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:config/application.properties" />
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!--   
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持   
    --> 
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口(安全管理器)，这个属性是必须的 -->  
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
		<property name="loginUrl" value="${adminPath}/login" />
		<!-- 登录成功后要跳转的连接,因为登录成功后的处理逻辑在LoginController里硬编码 --> 
		<property name="successUrl" value="${adminPath}?login" />
		<property name="filters">
		    <map>
		    	<!-- 基于表单的身份验证 -->
		        <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter" />  
            </map>  
		</property>
		<property name="filterChainDefinitions">
			<!-- 
				配置拦截器 格式 "url=拦截器[参数]，拦截器[参数]"
				匹配顺序是按照在配置中的声明顺序匹配
			    支持通配符
			    	?   匹配一个字符   eg:/admin? 将匹配/admin1，但不匹配/admin或/admin11
			    	*   匹配零个或多个字符  eg:/admin** 将匹配/admin11，但不匹配/admin/1
			    	**  匹配路径中的零个或多个路径  eg:/admin/**将匹配/admin/a或/admin/a/b
			-->
			<value>
				/static/** = anon    <!-- 匿名访问，不需要登录即可访问 -->
				/download/** = anon
				${adminPath}/login = authc  <!-- 需要身份认证通过后才能访问 -->
				${adminPath}/logout = authc  <!-- 需要身份认证通过后才能访问 -->
				${adminPath}/rest/**= authcBasic
				${adminPath}/** = user  
			</value>
		</property>
	</bean>
	
	<!-- 注销Filter -->
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">  
	   <property name="redirectUrl" value="${adminPath}/login" />  
	</bean>  
	
	<!-- Shiro Filter -->
	<!-- <bean id="myCaptchaFilter" class="org.safari.platform.common.security.FormAuthenticationFilter"/> -->
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
	<!-- Shiro的主要业务层对象基于web的应用程序 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<property name="cacheManager" ref="shiroCacheManager" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:cache/ehcache-shiro.xml"/>
	</bean>
	
	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager" class="org.safari.platform.common.security.shiro.session.SessionManager"> 
		<!-- 会话读写的实现 -->
		<property name="sessionDAO" ref="sessionDAO"/>
		<!-- 会话超时时间，覆盖web.xml中的超时间设置，默认30分钟。单位：毫秒  -->
		<property name="globalSessionTimeout" value="${session.sessionTimeout}"/>
 		<!-- 扫描session线程,负责清理超时会话 -->
 		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
		<property name="sessionValidationInterval" value="${session.sessionTimeoutClean}"/>
 		
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="sid"/>
	</bean>

	<!-- 自定义Session存储容器 -->
	<bean id="sessionDAO" class="org.safari.platform.common.security.shiro.session.CacheSessionDAO">
		<property name="sessionIdGenerator" ref="idGen" />
		<property name="activeSessionsCacheName" value="shiroCache" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- ID生成策略 -->
	<bean id="idGen" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!--开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，  
       并在必要时进行安全逻辑验证  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
</beans>